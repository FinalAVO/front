<html>

<head>
    <meta charset="utf-8" />
    <style>
    text:hover {
        stroke: black;
    }
    </style>
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
</head>

<body>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script src="https://rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js" type="text/JavaScript"></script>
    <script>
        const width = 1200
        const height = 800

        var svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);
        d3.csv("<%= session.csvData %>", function (data) {
            showCloud(data)
        });
        //scale.linear: 선형적인 스케일로 표준화를 시킨다.
        //domain: 데이터의 범위, 입력 크기
        //range: 표시할 범위, 출력 크기
        //clamp: domain의 범위를 넘어간 값에 대하여 domain의 최대값으로 고정시킨다.
        wordScale = d3.scale.linear().domain([0, 100]).range([30, 150]).clamp(true);
        var keywords = []
        var svg = d3.select("svg")
                    .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")

        function showCloud(data) {
          keywords = [data[0].text, data[1].text, data[2].text]
            d3.layout.cloud().size([width, height])
                //클라우드 레이아웃에 데이터 전달
                .words(data)
                .rotate(function (d) {
                    return d.text.length > 3 ? 0 : 0;
                })
                //스케일로 각 단어의 크기를 설정
                .fontSize(function (d) {
                    return wordScale(d.frequency);
                })
                //클라우드 레이아웃을 초기화 > end이벤트 발생 > 연결된 함수 작동
                .on("end", draw)
                .start();

            function draw(words) {
                var cloud = svg.selectAll("text").data(words)
                //Entering words
                cloud.enter()
                    .append("text")
                    .style("fill", function (d) {
                        return (keywords.indexOf(d.text) > -1 ? "#fbc280" : "#405275");
                    })
                    .style("fill-opacity", .5)
                    .attr("text-anchor", "middle")
                    .attr('font-size', 1)
                    .text(function (d) {
                        return d.text;
                    })
                    .on("mouseover", handleMouseOver)
                    .on("mouseout", handleMouseOut);
                cloud
                    .transition()
                    .duration(600)
                    .style("font-size", function (d) {
                        return d.size + "px";
                    })
                    .attr("transform", function (d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .style("fill-opacity", 1)
            }
        }

        function handleMouseOver(d) {  // Add interactivity
          console.log("hello");

            // Use D3 to select element, change color and size
            d3.select(this).style("fill-opacity", 0)

            // Specify where to put label of text
            svg.append("text").attr({
                id: "t" + d.x + "-" + d.y,
                x: function() { return d.x - 120; },
                y: function() { return d.y; }
            })
            .attr('font-size', 200)
            .text(function() {
              return d.frequency;  // Value of the text
            });
          }

          function handleMouseOut(d) {
            console.log("bye");
              // Use D3 to select element, change color back to normal
              d3.select(this).style("fill-opacity", 1)

              // Select text by id and then remove
              d3.select("#t" + d.x + "-" + d.y).remove();  // Remove text location
            }

    </script>
</body>

</html>
